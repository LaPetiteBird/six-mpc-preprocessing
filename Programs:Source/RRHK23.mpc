from Compiler.library import print_ln
from Compiler.types import sint, Matrix

# Parameters
BATCH = 2       # mini-batch size
IN_H = 4        # input height
IN_W = 4        # input width
IN_C = 1        # input channels
OUT_C = 2       # output channels
K_H = 2         # kernel height
K_W = 2         # kernel width

# Derived parameters
FILTER_SIZE = K_H * K_W * IN_C
OUT_H = IN_H - K_H + 1
OUT_W = IN_W - K_W + 1
N_WINDOWS = BATCH * OUT_H * OUT_W

# Input matrix: N_WINDOWS × FILTER_SIZE
X = Matrix(N_WINDOWS, FILTER_SIZE, sint)
X.input_from(0)

# Filter matrix: FILTER_SIZE × OUT_C
W = Matrix(FILTER_SIZE, OUT_C, sint)
W.input_from(1)

# Secure convolution via Beaver-style matrix multiplication
Y = X.mul(W)  # result: N_WINDOWS × OUT_C

# Print a few example outputs
print_ln("Output of secure convolution:")
for i in range(min(4, N_WINDOWS)):
    for j in range(OUT_C):
        print_ln("Y[%s][%s] = %s", i, j, Y[i][j].reveal())
